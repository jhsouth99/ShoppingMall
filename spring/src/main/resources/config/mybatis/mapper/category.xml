<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="category">
    <select id="findAll" resultType="com.example.ecommerce.dto.CategoryDTO">
        SELECT
            c.id,
            c.name,
            c.parent_id AS parentId,
            c.description,
            ci.image_url AS imageUrl,
            (SELECT COUNT(*) FROM products p WHERE p.category_id = c.id) AS productCount
        FROM
            categories c
        LEFT JOIN
            category_images ci ON c.id = ci.category_id AND ci.image_type = 'PRIMARY'
        ORDER BY
            c.parent_id, c.display_order, c.name
    </select>
    <select id="findCategoryPathById" parameterType="int" resultType="int"> SELECT id FROM categories START WITH id = #{categoryId} CONNECT BY PRIOR parent_id = id ORDER BY LEVEL DESC </select>
    <!-- 특정 카테고리 정보 조회 -->
    <select id="findCategoryById" parameterType="int" resultType="Category">
        SELECT
            id,
            name,
            parent_id,
            description,
            display_order,
            is_active
        FROM categories
        WHERE id = #{categoryId}
          AND is_active = 'Y'
    </select>

    <insert id="insertCategory" parameterType="com.example.ecommerce.dto.CategoryDTO" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        <selectKey keyProperty="id" resultType="int" order="BEFORE">
            SELECT categories_seq.nextval FROM dual
        </selectKey>
        INSERT INTO categories (id, name, parent_id, description, display_order, is_active)
        VALUES (#{id}, #{name}, #{parentId, jdbcType=INTEGER}, #{description, jdbcType=VARCHAR}, 0, 'Y')
    </insert>

    <update id="updateCategory" parameterType="com.example.ecommerce.dto.CategoryDTO">
        UPDATE categories
        SET
            name = #{name},
            parent_id = #{parentId, jdbcType=INTEGER},
            description = #{description, jdbcType=VARCHAR}
            -- 이미지 URL은 category_images 테이블을 따로 관리해야 함 (여기서는 생략)
        WHERE
            id = #{id}
    </update>

    <delete id="deleteCategory" parameterType="int">
        DELETE FROM categories WHERE id = #{categoryId}
    </delete>

    <select id="countChildren" parameterType="int" resultType="int">
        SELECT COUNT(*) FROM categories WHERE parent_id = #{categoryId}
    </select>

    <!-- 카테고리 경로 조회 (브레드크럼용) -->
    <select id="findCategoryPath" parameterType="int" resultType="Category">
        SELECT
            id,
            name,
            parent_id,
            display_order
        FROM categories
        START WITH id = #{categoryId}
        CONNECT BY id = PRIOR parent_id
               AND is_active = 'Y'
        ORDER BY LEVEL DESC
    </select>

    <!-- 하위 카테고리 목록 조회 (상품 개수 포함 + 자손 카테고리 상품 개수 합계) -->
    <select id="findSubCategoriesWithProductCount" parameterType="int" resultType="Category">
        SELECT
            c.id,
            c.name,
            c.parent_id,
            c.display_order,
            c.description,
            -- 카테고리별 상품 개수 (현재 카테고리만)
            (SELECT COUNT(p.id)
             FROM products p
             WHERE p.category_id = c.id
               AND p.deleted_at IS NULL
            ) AS product_count,
            -- 자손 카테고리들의 상품 개수 합계 (CONNECT BY 사용)
            (SELECT COUNT(p.id)
             FROM products p
             WHERE p.category_id IN (
                 SELECT descendant.id
                 FROM categories descendant
                 START WITH descendant.id = c.id
                 CONNECT BY PRIOR descendant.id = descendant.parent_id
                        AND descendant.is_active = 'Y'
             )
               AND p.deleted_at IS NULL
            ) AS product_count_with_children,
            -- 카테고리 이미지 URL (있는 경우)
            (SELECT ci.image_url
             FROM category_images ci
             WHERE ci.category_id = c.id
               AND ci.image_type = 'THUMBNAIL'
               AND ROWNUM = 1
            ) AS image_url
        FROM categories c
        WHERE c.parent_id = #{categoryId}
          AND c.is_active = 'Y'
        ORDER BY c.display_order ASC, c.name ASC
    </select>

    <!-- 모든 하위 카테고리 ID 목록 조회 -->
    <select id="findAllDescendantIds" parameterType="int" resultType="int">
        SELECT id
        FROM categories
        START WITH id = #{categoryId}
        CONNECT BY PRIOR id = parent_id
               AND is_active = 'Y'
    </select>

    <!-- 카테고리별 속성 조회 -->
    <select id="findAttributesByCategoryId" parameterType="int" resultType="Attribute">
        SELECT
            a.id,
            a.name,
            a.data_type,
            a.attribute_group,
            a.is_searchable,
            a.is_required,
            a.display_order
        FROM attributes a
                 JOIN category_attributes ca ON a.id = ca.attribute_id
        WHERE ca.category_id = #{categoryId}
          AND a.is_searchable = 'Y'
        ORDER BY a.display_order ASC, a.id ASC
    </select>

    <!-- 특정 속성의 옵션값들을 조회하는 쿼리 -->
    <select id="findAttributeOptions" parameterType="int" resultType="AttributeOption">
        SELECT
            id,
            attribute_id,
            option_value AS value,
            display_order
        FROM attribute_options
        WHERE attribute_id = #{attributeId}
        ORDER BY display_order ASC, option_value ASC
    </select>

    <!-- 카테고리별 속성의 실제 사용값들을 조회 (동적 필터링용) -->
    <select id="findUsedAttributeValues" parameterType="map" resultType="string">
        SELECT DISTINCT pav.value_text
        FROM product_attribute_values pav
                 JOIN products p ON pav.product_id = p.id
        WHERE pav.attribute_id = #{attributeId}
          AND p.category_id IN (
            SELECT id
            FROM categories
            START WITH id = #{categoryId}
            CONNECT BY PRIOR id = parent_id
                   AND is_active = 'Y'
        )
          AND p.deleted_at IS NULL
          AND EXISTS (
            SELECT 1 FROM product_variants pv
            WHERE pv.product_id = p.id
              AND pv.is_active = 'Y'
              AND pv.stock_quantity > 0
        )
        ORDER BY pav.value_text ASC
    </select>

    <!-- 여러 카테고리에 연결된 속성 목록을 조회 -->
    <select id="findAttributesByCategoryIds" parameterType="list" resultType="Attribute">
        SELECT DISTINCT
        a.id,
        a.name,
        a.data_type,
        a.attribute_group,
        a.is_searchable,
        a.is_required,
        a.display_order
        FROM attributes a
        JOIN category_attributes ca ON a.id = ca.attribute_id
        WHERE ca.category_id IN
        <foreach collection="list" item="categoryId" open="(" separator="," close=")">
            #{categoryId}
        </foreach>
        AND a.is_searchable = 'Y'
        ORDER BY a.display_order ASC, a.id ASC
    </select>

    <select id="findAttributeById" parameterType="int" resultType="Attribute">
        SELECT * FROM attributes where id = #{id}
    </select>


    <insert id="insertPrimaryImage" parameterType="map">
        INSERT INTO category_images (id, category_id, image_url, image_type, display_order)
        VALUES (#{id}, #{categoryId}, #{imageUrl}, 'PRIMARY', 1)
    </insert>

    <delete id="deletePrimaryImage" parameterType="int">
        DELETE FROM category_images WHERE category_id = #{categoryId} AND image_type = 'PRIMARY'
    </delete>

    <delete id="deleteAllImages" parameterType="int">
        DELETE FROM category_images WHERE category_id = #{categoryId}
    </delete>

    <!-- 특정 카테고리에 연결된 속성 목록 조회 -->
    <select id="findCategoryAttributes" parameterType="int" resultType="CategoryAttribute">
        SELECT
            ca.category_id,
            ca.attribute_id,
            a.name AS attribute_name,
            a.data_type,
            ca.is_required,
            ca.display_order
        FROM category_attributes ca
                 JOIN attributes a ON ca.attribute_id = a.id
        WHERE ca.category_id = #{categoryId}
        ORDER BY ca.display_order ASC, a.name ASC
    </select>

    <!-- 카테고리-속성 연결 삽입 -->
    <insert id="insertCategoryAttribute" parameterType="CategoryAttribute">
        INSERT INTO category_attributes (
            category_id,
            attribute_id,
            is_required,
            display_order
        ) VALUES (
                     #{categoryId},
                     #{attributeId},
                     #{isRequired, typeHandler=com.example.ecommerce.handler.BooleanYNTypeHandler},
                     #{displayOrder}
                 )
    </insert>

    <!-- 특정 카테고리의 모든 속성 연결 삭제 -->
    <delete id="deleteCategoryAttributes" parameterType="int">
        DELETE FROM category_attributes WHERE category_id = #{categoryId}
    </delete>

</mapper>