<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="inquiry">

    <!-- 고객의 문의 목록 조회 (기존과 동일하지만 새 컬럼 추가) -->
    <select id="findInquiriesByCustomerId" parameterType="map" resultType="Inquiry">
        SELECT * FROM (
                          SELECT ROWNUM AS rnum, i_outer.* FROM (
                                                                    SELECT
                                                                        i.id,
                                                                        i.inquiry_type,
                                                                        i.title,
                                                                        i.question,
                                                                        i.answer,
                                                                        i.status,
                                                                        i.product_id,
                                                                        p.name AS product_name,
                                                                        i.target_seller_id,
                                                                        s.name AS target_seller_name,
                                                                        i.created_at,
                                                                        i.answered_at,
                                                                        CASE
                                                                            WHEN i.answered_by_seller_id IS NOT NULL THEN 'SELLER'
                                                                            WHEN i.ans_by_admin_id IS NOT NULL THEN 'ADMIN'
                                                                            ELSE NULL
                                                                            END AS answered_by_type,
                                                                        COALESCE(
                                                                                (SELECT name FROM users WHERE id = i.answered_by_seller_id),
                                                                                (SELECT name FROM users WHERE id = i.ans_by_admin_id)
                                                                        ) AS answered_by_name
                                                                    FROM inquiries i
                                                                             LEFT JOIN products p ON i.product_id = p.id
                                                                             LEFT JOIN users s ON i.target_seller_id = s.id
                                                                    WHERE i.user_id = #{id}
                                                                    ORDER BY i.created_at DESC
                                                                ) i_outer
                          WHERE ROWNUM &lt;= #{offset} + #{size}
                      ) WHERE rnum > #{offset}
    </select>

    <select id="countInquiriesByCustomerId" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM inquiries i
        WHERE i.user_id = #{id}
    </select>

    <!-- 판매자의 문의 목록 조회 (완전히 새로 작성) -->
    <select id="findInquiriesBySellerId" parameterType="map" resultType="Inquiry">
        SELECT * FROM (
        SELECT ROWNUM AS rnum, i_outer.* FROM (
        SELECT
        i.id,
        i.inquiry_type,
        i.title,
        i.question,
        i.answer,
        i.status,
        i.product_id,
        p.name AS product_name,
        i.user_id,
        u.name AS customer_name,
        i.created_at,
        i.answered_at
        FROM inquiries i
        JOIN users u ON i.user_id = u.id
        LEFT JOIN products p ON i.product_id = p.id
        WHERE i.target_seller_id = #{sellerId}
        <if test="keyword != null and keyword != ''">
            AND (i.title LIKE '%' || #{keyword} || '%'
            OR u.name LIKE '%' || #{keyword} || '%'
            OR p.name LIKE '%' || #{keyword} || '%')
        </if>
        <if test="status != null and status != ''">
            AND i.status = #{status}
        </if>
        <if test="inquiryType != null and inquiryType != ''">
            AND i.inquiry_type = #{inquiryType}
        </if>
        ORDER BY i.created_at DESC
        ) i_outer
        WHERE ROWNUM &lt;= #{offset} + #{size}
        ) WHERE rnum > #{offset}
    </select>

    <select id="countInquiriesBySellerId" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM inquiries i
        WHERE i.target_seller_id = #{sellerId}
        <if test="keyword != null and keyword != ''">
            AND (i.title LIKE '%' || #{keyword} || '%'
            OR EXISTS (SELECT 1 FROM users u WHERE u.id = i.user_id AND u.name LIKE '%' || #{keyword} || '%')
            OR EXISTS (SELECT 1 FROM products p WHERE p.id = i.product_id AND p.name LIKE '%' || #{keyword} || '%'))
        </if>
        <if test="status != null and status != ''">
            AND i.status = #{status}
        </if>
        <if test="inquiryType != null and inquiryType != ''">
            AND i.inquiry_type = #{inquiryType}
        </if>
    </select>

    <!-- 관리자의 전체 문의 목록 조회 (새로 추가) -->
    <select id="findInquiriesForAdmin" parameterType="map" resultType="Inquiry">
        SELECT * FROM (
        SELECT ROWNUM AS rnum, i_outer.* FROM (
        SELECT
        i.id,
        i.inquiry_type,
        i.title,
        i.question,
        i.answer,
        i.status,
        i.product_id,
        p.name AS product_name,
        i.target_seller_id,
        s.name AS target_seller_name,
        i.user_id,
        u.name AS customer_name,
        i.created_at,
        i.answered_at,
        CASE
        WHEN i.answered_by_seller_id IS NOT NULL THEN 'SELLER'
        WHEN i.ans_by_admin_id IS NOT NULL THEN 'ADMIN'
        ELSE NULL
        END AS answered_by_type
        FROM inquiries i
        JOIN users u ON i.user_id = u.id
        LEFT JOIN products p ON i.product_id = p.id
        LEFT JOIN users s ON i.target_seller_id = s.id
        WHERE 1=1
        <if test="keyword != null and keyword != ''">
            AND (i.title LIKE '%' || #{keyword} || '%'
            OR u.name LIKE '%' || #{keyword} || '%'
            OR p.name LIKE '%' || #{keyword} || '%'
            OR s.name LIKE '%' || #{keyword} || '%')
        </if>
        <if test="status != null and status != ''">
            AND i.status = #{status}
        </if>
        <if test="inquiryType != null and inquiryType != ''">
            AND i.inquiry_type = #{inquiryType}
        </if>
        <if test="targetType != null">
            <if test="targetType == 'admin'">
                AND i.target_seller_id IS NULL
            </if>
            <if test="targetType == 'seller'">
                AND i.target_seller_id IS NOT NULL
            </if>
        </if>
        ORDER BY i.created_at DESC
        ) i_outer
        WHERE ROWNUM &lt;= #{offset} + #{size}
        ) WHERE rnum > #{offset}
    </select>

    <select id="countInquiriesForAdmin" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM inquiries i
        JOIN users u ON i.user_id = u.id
        LEFT JOIN products p ON i.product_id = p.id
        LEFT JOIN users s ON i.target_seller_id = s.id
        WHERE 1=1
        <if test="keyword != null and keyword != ''">
            AND (i.title LIKE '%' || #{keyword} || '%'
            OR u.name LIKE '%' || #{keyword} || '%'
            OR p.name LIKE '%' || #{keyword} || '%'
            OR s.name LIKE '%' || #{keyword} || '%')
        </if>
        <if test="status != null and status != ''">
            AND i.status = #{status}
        </if>
        <if test="inquiryType != null and inquiryType != ''">
            AND i.inquiry_type = #{inquiryType}
        </if>
        <if test="targetType != null">
            <if test="targetType == 'admin'">
                AND i.target_seller_id IS NULL
            </if>
            <if test="targetType == 'seller'">
                AND i.target_seller_id IS NOT NULL
            </if>
        </if>
    </select>

    <!-- 판매자 답변 업데이트 (새로 작성) -->
    <update id="updateInquiryAnswerBySeller" parameterType="map">
        UPDATE inquiries
        SET answer = #{answer},
            status = 'ANSWERED',
            answered_by_seller_id = #{sellerId},
            answered_at = CURRENT_TIMESTAMP
        WHERE id = #{inquiryId}
          AND target_seller_id = #{sellerId}
    </update>

    <!-- 관리자 답변 업데이트 (기존 수정) -->
    <update id="updateInquiryAnswerByAdmin" parameterType="map">
        UPDATE inquiries
        SET answer = #{answer},
            status = 'ANSWERED',
            ans_by_admin_id = #{adminId},
            answered_at = CURRENT_TIMESTAMP
        WHERE id = #{inquiryId}
    </update>

    <!-- 기존 updateInquiryAnswer는 사용하지 않으므로 제거하거나 deprecated 처리 -->
    <!-- 호환성을 위해 남겨둔다면: -->
    <update id="updateInquiryAnswer" parameterType="map">
        UPDATE inquiries
        SET answer = #{answer},
            status = 'ANSWERED',
            ans_by_admin_id = #{sellerId},  -- 기존 로직 유지 (하지만 권장하지 않음)
            answered_at = CURRENT_TIMESTAMP
        WHERE id = #{inquiryId}
    </update>

    <!-- 문의 생성 (새로 추가) -->
    <insert id="createInquiry" parameterType="Inquiry">
        <selectKey keyProperty="id" resultType="int" order="BEFORE">
            SELECT inquiries_seq.nextval FROM dual
        </selectKey>
        INSERT INTO inquiries (
        id, user_id, inquiry_type, title, question,
        product_id, target_seller_id, status, created_at
        ) VALUES (
        #{id}, #{userId}, #{inquiryType}, #{title}, #{question},
        #{productId}, #{targetSellerId}, 'PENDING', CURRENT_TIMESTAMP
        )
    </insert>

    <!-- 특정 문의 상세 조회 (새로 추가) -->
    <select id="findInquiryById" parameterType="int" resultType="Inquiry">
        SELECT
            i.id,
            i.inquiry_type,
            i.title,
            i.question,
            i.answer,
            i.status,
            i.product_id,
            p.name AS product_name,
            i.target_seller_id,
            s.name AS target_seller_name,
            i.user_id,
            u.name AS customer_name,
            i.created_at,
            i.answered_at,
            CASE
                WHEN i.answered_by_seller_id IS NOT NULL THEN 'SELLER'
                WHEN i.ans_by_admin_id IS NOT NULL THEN 'ADMIN'
                ELSE NULL
                END AS answered_by_type,
            COALESCE(
                    (SELECT name FROM users WHERE id = i.answered_by_seller_id),
                    (SELECT name FROM users WHERE id = i.ans_by_admin_id)
            ) AS answered_by_name
        FROM inquiries i
                 JOIN users u ON i.user_id = u.id
                 LEFT JOIN products p ON i.product_id = p.id
                 LEFT JOIN users s ON i.target_seller_id = s.id
        WHERE i.id = #{id}
    </select>

    <!-- 문의 삭제 -->
    <delete id="deleteInquiry" parameterType="int">
        DELETE FROM inquiries WHERE id = #{id}
    </delete>

</mapper>