<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="refund">

    <!-- 환불 정보 조회 (주문번호로) -->
    <select id="findRefundsByOrderNo" parameterType="string" resultType="Refund">
        SELECT
            r.id,
            r.refund_no AS refundNo,
            r.order_id AS orderId,
            r.payment_id AS paymentId,
            r.prod_items_total_amount AS prodItemsTotalAmount,
            r.shipping_fee_deduction AS shippingFeeDeduction,
            r.other_deductions AS otherDeductions,
            r.final_refund_amount AS finalRefundAmount,
            r.refund_reason AS refundReason,
            r.refund_reason_detail AS refundReasonDetail,
            r.status,
            r.requested_at AS requestedAt,
            r.processed_at AS processedAt,
            r.processed_by AS processedBy,
            r.transaction_id AS transactionId,
            r.created_at AS createdAt,
            r.updated_at AS updatedAt,
            o.order_no AS orderNo,
            u.name AS processedByName
        FROM refunds r
                 JOIN orders o ON r.order_id = o.id
                 LEFT JOIN users u ON r.processed_by = u.id
        WHERE o.order_no = #{orderNo}
        ORDER BY r.created_at DESC
    </select>

    <!-- 환불 정보 조회 (ID로) -->
    <select id="findRefundById" parameterType="long" resultType="Refund">
        SELECT
            r.id,
            r.refund_no AS refundNo,
            r.order_id AS orderId,
            r.payment_id AS paymentId,
            r.prod_items_total_amount AS prodItemsTotalAmount,
            r.shipping_fee_deduction AS shippingFeeDeduction,
            r.other_deductions AS otherDeductions,
            r.final_refund_amount AS finalRefundAmount,
            r.refund_reason AS refundReason,
            r.refund_reason_detail AS refundReasonDetail,
            r.status,
            r.requested_at AS requestedAt,
            r.processed_at AS processedAt,
            r.processed_by AS processedBy,
            r.transaction_id AS transactionId,
            r.created_at AS createdAt,
            r.updated_at AS updatedAt
        FROM refunds r
        WHERE r.id = #{id}
    </select>

    <!-- 사용자별 환불 목록 조회 -->
    <select id="findRefundsByUserId" parameterType="long" resultType="Refund">
        SELECT
            r.id,
            r.refund_no AS refundNo,
            r.order_id AS orderId,
            r.payment_id AS paymentId,
            r.prod_items_total_amount AS prodItemsTotalAmount,
            r.shipping_fee_deduction AS shippingFeeDeduction,
            r.other_deductions AS otherDeductions,
            r.final_refund_amount AS finalRefundAmount,
            r.refund_reason AS refundReason,
            r.refund_reason_detail AS refundReasonDetail,
            r.status,
            r.requested_at AS requestedAt,
            r.processed_at AS processedAt,
            r.processed_by AS processedBy,
            r.transaction_id AS transactionId,
            r.created_at AS createdAt,
            r.updated_at AS updatedAt,
            o.order_no AS orderNo
        FROM refunds r
                 JOIN orders o ON r.order_id = o.id
        WHERE o.user_id = #{userId}
        ORDER BY r.created_at DESC
    </select>

    <!-- 환불 상태별 조회 -->
    <select id="findRefundsByStatus" parameterType="string" resultType="Refund">
        SELECT
            r.id,
            r.refund_no AS refundNo,
            r.order_id AS orderId,
            r.payment_id AS paymentId,
            r.prod_items_total_amount AS prodItemsTotalAmount,
            r.shipping_fee_deduction AS shippingFeeDeduction,
            r.other_deductions AS otherDeductions,
            r.final_refund_amount AS finalRefundAmount,
            r.refund_reason AS refundReason,
            r.refund_reason_detail AS refundReasonDetail,
            r.status,
            r.requested_at AS requestedAt,
            r.processed_at AS processedAt,
            r.processed_by AS processedBy,
            r.transaction_id AS transactionId,
            r.created_at AS createdAt,
            r.updated_at AS updatedAt,
            o.order_no AS orderNo
        FROM refunds r
                 JOIN orders o ON r.order_id = o.id
        WHERE r.status = #{status}
        ORDER BY r.created_at DESC
    </select>

    <!-- 환불 등록 -->
    <insert id="insertRefund" parameterType="Refund">
        <selectKey keyProperty="id" resultType="long" order="BEFORE">
            SELECT refunds_seq.NEXTVAL FROM dual
        </selectKey>
        INSERT INTO refunds (
        id,
        refund_no,
        order_id,
        payment_id,
        prod_items_total_amount,
        shipping_fee_deduction,
        other_deductions,
        final_refund_amount,
        refund_reason,
        refund_reason_detail,
        status,
        requested_at,
        transaction_id,
        created_at,
        updated_at
        ) VALUES (
        #{id},
        #{refundNo},
        #{orderId},
        #{paymentId},
        #{prodItemsTotalAmount},
        #{shippingFeeDeduction, jdbcType=DECIMAL},
        #{otherDeductions, jdbcType=DECIMAL},
        #{finalRefundAmount},
        #{refundReason},
        #{refundReasonDetail, jdbcType=CLOB},
        #{status},
        #{requestedAt},
        #{transactionId, jdbcType=VARCHAR},
        CURRENT_TIMESTAMP,
        CURRENT_TIMESTAMP
        )
    </insert>

    <!-- 환불 상태 업데이트 -->
    <update id="updateRefundStatus" parameterType="map">
        UPDATE refunds
        SET status = #{status},
            processed_at = #{processedAt, jdbcType=TIMESTAMP},
            processed_by = #{processedBy, jdbcType=NUMERIC},
            updated_at = CURRENT_TIMESTAMP
        WHERE id = #{refundId}
    </update>

    <!-- 환불 정보 수정 -->
    <update id="updateRefund" parameterType="Refund">
        UPDATE refunds
        SET prod_items_total_amount = #{prodItemsTotalAmount},
            shipping_fee_deduction = #{shippingFeeDeduction, jdbcType=DECIMAL},
            other_deductions = #{otherDeductions, jdbcType=DECIMAL},
            final_refund_amount = #{finalRefundAmount},
            refund_reason = #{refundReason},
            refund_reason_detail = #{refundReasonDetail, jdbcType=CLOB},
            status = #{status},
            transaction_id = #{transactionId, jdbcType=VARCHAR},
            updated_at = CURRENT_TIMESTAMP
        WHERE id = #{id}
    </update>

    <!-- 환불 항목 조회 -->
    <select id="findRefundItemsByRefundId" parameterType="long" resultType="RefundItem">
        SELECT
            ri.id,
            ri.refund_id AS refundId,
            ri.order_item_id AS orderItemId,
            ri.quantity,
            ri.item_price_at_refund AS itemPriceAtRefund,
            ri.item_total_amount AS itemTotalAmount,
            oi.product_variant_id AS productVariantId,
            p.name AS productName
        FROM refund_items ri
                 JOIN order_items oi ON ri.order_item_id = oi.id
                 JOIN product_variants pv ON oi.product_variant_id = pv.id
                 JOIN products p ON pv.product_id = p.id
        WHERE ri.refund_id = #{refundId}
        ORDER BY ri.id
    </select>

    <!-- 환불 항목 등록 -->
    <insert id="insertRefundItem" parameterType="RefundItem">
        INSERT INTO refund_items (
            id,
            refund_id,
            order_item_id,
            quantity,
            item_price_at_refund,
            item_total_amount
        ) VALUES (
                     refund_items_seq.NEXTVAL,
                     #{refundId},
                     #{orderItemId},
                     #{quantity},
                     #{itemPriceAtRefund},
                     #{itemTotalAmount}
                 )
    </insert>

    <!-- 환불 통계 조회 (날짜 범위) -->
    <select id="getRefundStatsByDateRange" parameterType="map" resultType="map">
        SELECT
            COUNT(*) AS totalRefunds,
            SUM(final_refund_amount) AS totalRefundAmount,
            AVG(final_refund_amount) AS avgRefundAmount,
            COUNT(CASE WHEN status = 'COMPLETED' THEN 1 END) AS completedRefunds,
            COUNT(CASE WHEN status = 'REQUESTED' THEN 1 END) AS requestedRefunds,
            COUNT(CASE WHEN status = 'PROCESSING' THEN 1 END) AS processingRefunds
        FROM refunds
        WHERE created_at BETWEEN #{startDate} AND #{endDate}
    </select>

    <!-- 판매자별 환불 목록 조회 -->
    <select id="findRefundsBySellerId" parameterType="long" resultType="Refund">
        SELECT
            r.id,
            r.refund_no AS refundNo,
            r.order_id AS orderId,
            r.payment_id AS paymentId,
            r.prod_items_total_amount AS prodItemsTotalAmount,
            r.shipping_fee_deduction AS shippingFeeDeduction,
            r.other_deductions AS otherDeductions,
            r.final_refund_amount AS finalRefundAmount,
            r.refund_reason AS refundReason,
            r.refund_reason_detail AS refundReasonDetail,
            r.status,
            r.requested_at AS requestedAt,
            r.processed_at AS processedAt,
            r.processed_by AS processedBy,
            r.transaction_id AS transactionId,
            r.created_at AS createdAt,
            r.updated_at AS updatedAt,
            o.order_no AS orderNo
        FROM refunds r
                 JOIN orders o ON r.order_id = o.id
                 JOIN order_items oi ON o.id = oi.order_id
                 JOIN product_variants pv ON oi.product_variant_id = pv.id
                 JOIN products p ON pv.product_id = p.id
        WHERE p.seller_id = #{sellerId}
        GROUP BY r.id, r.refund_no, r.order_id, r.payment_id, r.prod_items_total_amount,
                 r.shipping_fee_deduction, r.other_deductions, r.final_refund_amount,
                 r.refund_reason, r.refund_reason_detail, r.status, r.requested_at,
                 r.processed_at, r.processed_by, r.transaction_id, r.created_at,
                 r.updated_at, o.order_no
        ORDER BY r.created_at DESC
    </select>

</mapper>