<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.ecommerce.mapper.SearchMapper">

	<!-- 태그 기반 상품 검색 -->
	<select id="searchProducts" parameterType="map" resultType="SearchProduct">
	    SELECT *
	    FROM (
	        SELECT
	            p.id,
	            p.seller_id,
	            p.category_id,
	            p.name,
	            p.description,
	            p.detailed_content,
	            p.base_price,
	            p.is_discounted,
	            p.discount_price,
	            p.discount_start,
	            p.discount_end,
	            p.is_business_only,
	            p.view_count,
	            p.sold_count,
	            pi.image_url,
	            pi.alt_text,
	            c.name as category_name,
	            -- 할인율 계산
	            CASE 
	                WHEN p.is_discounted = 'Y' 
	                AND p.discount_start &lt;= SYSDATE 
	                AND p.discount_end &gt;= SYSDATE 
	                AND p.discount_price IS NOT NULL
	                THEN ROUND(((p.base_price - p.discount_price) / p.base_price) * 100)
	                ELSE 0
	            END as discount_rate,
	            -- 공동구매 가능 여부 확인
	            CASE
	                WHEN GB.group_price IS NOT NULL
	                THEN 1
	                ELSE 0
	            END as is_group_purchase,
	            -- 공동구매 가격 추가
	            GB.group_price as group_price,
	            -- 실제 판매가격 계산 (정렬에 사용)
	            CASE 
	                WHEN p.is_discounted = 'Y' 
	                AND p.discount_start &lt;= SYSDATE 
	                AND p.discount_end &gt;= SYSDATE 
	                AND p.discount_price IS NOT NULL 
	                THEN p.discount_price 
	                ELSE p.base_price 
	            END as actual_price,
	            ROWNUM as RN
	        FROM products p
	        -- 카테고리 조인
	        LEFT JOIN categories c ON p.category_id = c.id
	        <!-- 공동구매 정보 조인 (활성 상태인 공동구매만) -->
	        LEFT JOIN (
	            SELECT DISTINCT PV.product_id, GB_sub.group_price
	            FROM group_buys GB_sub
	            INNER JOIN product_variants PV ON GB_sub.product_variant_id = PV.id
	            WHERE GB_sub.status = 'ACTIVE'
	            AND GB_sub.start_date &lt;= SYSDATE
	            AND GB_sub.end_date &gt;= SYSDATE
	        ) GB ON p.id = GB.product_id
	        <!-- 상품 이미지 조인 (첫 번째 이미지만) -->
	        LEFT JOIN (
	            SELECT product_id, image_url, alt_text,
	                   ROW_NUMBER() OVER (PARTITION BY product_id ORDER BY "ORDER") as RN_image
	            FROM product_images
	        ) pi ON p.id = pi.product_id AND pi.RN_image = 1
	        WHERE p.deleted_at IS NULL
	            <!-- 태그 기반 검색 조건 -->
	            <if test="keyword != null and keyword != ''">
		            AND EXISTS (
		                SELECT 1 
		                FROM product_tags PT 
		                JOIN tags t ON PT.tag_id = t.id 
		                WHERE PT.product_id = p.id 
		                AND UPPER(t.name) LIKE UPPER('%' || #{keyword} || '%')
		            )
	            </if>
	            
	            <!-- 카테고리 필터 -->
			    <if test="categoryFilter != null and categoryFilter != 'all'">
			        AND (
			            <if test="categoryFilter == 'clothing'">p.category_id = 1</if>
			            <if test="categoryFilter == 'food'">p.category_id = 2</if>
			            <if test="categoryFilter == 'electronics'">p.category_id = 3</if>
			        )
			    </if>
	            
	            <!-- 가격 필터 -->
	            <if test="priceFilter != null and priceFilter != 'all'">
	                AND (
	                    <if test="priceFilter == 'under-100000'">
	                        (CASE 
	                            WHEN p.is_discounted = 'Y' 
	                            AND p.discount_start &lt;= SYSDATE 
	                            AND p.discount_end &gt;= SYSDATE 
	                            AND p.discount_price IS NOT NULL 
	                            THEN p.discount_price 
	                            ELSE p.base_price 
	                        END) &lt; 100000
	                    </if>
	                    <if test="priceFilter == '100000-300000'">
	                        (CASE 
	                            WHEN p.is_discounted = 'Y' 
	                            AND p.discount_start &lt;= SYSDATE 
	                            AND p.discount_end &gt;= SYSDATE 
	                            AND p.discount_price IS NOT NULL 
	                            THEN p.discount_price 
	                            ELSE p.base_price 
	                        END) BETWEEN 100000 AND 300000
	                    </if>
	                    <if test="priceFilter == 'over-300000'">
	                        (CASE 
	                            WHEN p.is_discounted = 'Y' 
	                            AND p.discount_start &lt;= SYSDATE 
	                            AND p.discount_end &gt;= SYSDATE 
	                            AND p.discount_price IS NOT NULL 
	                            THEN p.discount_price 
	                            ELSE p.base_price 
	                        END) &gt; 300000
	                    </if>
	                )
	            </if>
	            
	            <!-- 할인 상품만 필터 -->
	            <if test="discountFilter != null and discountFilter == true">
	                AND p.is_discounted = 'Y'
	                AND p.discount_start &lt;= SYSDATE
	                AND p.discount_end &gt;= SYSDATE
	                AND p.discount_price IS NOT NULL
	            </if>
	            
	            <!-- 공동구매 상품만 필터 -->
	            <if test="groupPurchaseFilter != null and groupPurchaseFilter == true">
	                AND GB.group_price IS NOT NULL
	            </if>
	            
	        ORDER BY
	            <choose>
	                <when test="sortOption == 'popularity'">
	                    p.view_count DESC
	                </when>
	                <when test="sortOption == 'latest'">
	                    p.created_at DESC
	                </when>
	                <when test="sortOption == 'price-low'">
	                    (CASE 
	                        WHEN p.is_discounted = 'Y' 
	                        AND p.discount_start &lt;= SYSDATE 
	                        AND p.discount_end &gt;= SYSDATE 
	                        AND p.discount_price IS NOT NULL 
	                        THEN p.discount_price 
	                        ELSE p.base_price 
	                    END) ASC
	                </when>
	                <when test="sortOption == 'price-high'">
	                    (CASE 
	                        WHEN p.is_discounted = 'Y' 
	                        AND p.discount_start &lt;= SYSDATE 
	                        AND p.discount_end &gt;= SYSDATE 
	                        AND p.discount_price IS NOT NULL 
	                        THEN p.discount_price 
	                        ELSE p.base_price 
	                    END) DESC
	                </when>
	                <when test="sortOption == 'discount'">
	                    CASE
	                        WHEN p.is_discounted = 'Y' 
	                        AND p.discount_start &lt;= SYSDATE 
	                        AND p.discount_end &gt;= SYSDATE 
	                        AND p.discount_price IS NOT NULL
	                        THEN ROUND(((p.base_price - p.discount_price) / p.base_price) * 100)
	                        ELSE 0
	                    END DESC
	                </when>
	                <otherwise>
	                    p.view_count DESC
	                </otherwise>
	            </choose>
	            , p.id DESC
	    )
	    WHERE RN BETWEEN #{offset} + 1 AND #{offset} + #{limit}
	</select>

	<!-- 검색 결과 개수 조회 -->
	<select id="getSearchResultCount" parameterType="map" resultType="int">
	    SELECT COUNT(DISTINCT p.id)
	    FROM products p
	    -- 카테고리 조인
	    LEFT JOIN categories c ON p.category_id = c.id
	    -- 공동구매 정보 조인 (활성 상태인 공동구매만)
	    LEFT JOIN (
	        SELECT DISTINCT PV.product_id, GB_sub.group_price
	        FROM group_buys GB_sub
	        INNER JOIN product_variants PV ON GB_sub.product_variant_id = PV.id
	        WHERE GB_sub.status = 'ACTIVE'
	        AND GB_sub.start_date &lt;= SYSDATE
	        AND GB_sub.end_date &gt;= SYSDATE
	    ) GB ON p.id = GB.product_id
	    WHERE p.deleted_at IS NULL
	        <!-- 태그 기반 검색 조건 -->
	        <if test="keyword != null and keyword != ''">
		        AND EXISTS (
		            SELECT 1 
		            FROM product_tags PT 
		            JOIN tags t ON PT.tag_id = t.id 
		            WHERE PT.product_id = p.id 
		            AND UPPER(t.name) LIKE UPPER('%' || #{keyword} || '%')
		        )
	        </if>
		        
		    <if test="categoryFilter != null and categoryFilter != 'all'">
		        AND (
		            <if test="categoryFilter == 'clothing'">p.category_id = 1</if>
		            <if test="categoryFilter == 'food'">p.category_id = 2</if>
		            <if test="categoryFilter == 'electronics'">p.category_id = 3</if>
		        )
		    </if>
	        
	        <!-- 가격 필터 -->
	        <if test="priceFilter != null and priceFilter != 'all'">
	            AND (
	                <if test="priceFilter == 'under-100000'">
	                    (CASE 
	                        WHEN p.is_discounted = 'Y' 
	                        AND p.discount_start &lt;= SYSDATE 
	                        AND p.discount_end &gt;= SYSDATE 
	                        AND p.discount_price IS NOT NULL 
	                        THEN p.discount_price 
	                        ELSE p.base_price 
	                    END) &lt; 100000
	                </if>
	                <if test="priceFilter == '100000-300000'">
	                    (CASE 
	                        WHEN p.is_discounted = 'Y' 
	                        AND p.discount_start &lt;= SYSDATE 
	                        AND p.discount_end &gt;= SYSDATE 
	                        AND p.discount_price IS NOT NULL 
	                        THEN p.discount_price 
	                        ELSE p.base_price 
	                    END) BETWEEN 100000 AND 300000
	                </if>
	                <if test="priceFilter == 'over-300000'">
	                    (CASE 
	                        WHEN p.is_discounted = 'Y' 
	                        AND p.discount_start &lt;= SYSDATE 
	                        AND p.discount_end &gt;= SYSDATE 
	                        AND p.discount_price IS NOT NULL 
	                        THEN p.discount_price 
	                        ELSE p.base_price 
	                    END) &gt; 300000
	                </if>
	            )
	        </if>
	        
	        <!-- 할인 상품만 필터 -->
	        <if test="discountFilter != null and discountFilter == true">
	            AND p.is_discounted = 'Y'
	            AND p.discount_start &lt;= SYSDATE
	            AND p.discount_end &gt;= SYSDATE
	            AND p.discount_price IS NOT NULL
	        </if>
	        
	        <!-- 공동구매 상품만 필터 -->
	        <if test="groupPurchaseFilter != null and groupPurchaseFilter == true">
	            AND GB.group_price IS NOT NULL
	        </if>
	</select>

    <!-- 인기 검색어 목록 조회 -->
    <select id="getPopularSearchKeywords" parameterType="int" resultType="string">
        SELECT keyword
        FROM (
            SELECT keyword, COUNT(*) as search_count
            FROM search_keywords
            WHERE created_at &gt;= CURRENT_TIMESTAMP - 7
            GROUP BY keyword
            ORDER BY search_count DESC
        )
        WHERE ROWNUM &lt;= #{limit}
    </select>

    <!-- 검색어 기록 저장 -->
    <insert id="saveSearchKeyword" parameterType="string">
        MERGE INTO search_keywords SK
        USING (SELECT #{keyword} as keyword FROM dual) SRC
        ON (SK.keyword = SRC.keyword)
        WHEN MATCHED THEN
            UPDATE SET search_count = search_count + 1, updated_at = CURRENT_TIMESTAMP
        WHEN NOT MATCHED THEN
            INSERT (id, keyword, search_count, created_at, updated_at)
            VALUES (search_keywords_seq.NEXTVAL, #{keyword}, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
    </insert>

</mapper>
