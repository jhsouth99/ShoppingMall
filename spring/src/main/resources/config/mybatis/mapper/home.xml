<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="home">
	
    <!-- 기본 추천 상품 조회 (인기순 12개) -->
	<select id="getRecommendedProducts" resultType="Product">
	    SELECT * FROM (
	        SELECT 
	            p.id,
	            p.seller_id,
	            p.category_id,
	            p.name,
	            p.description,
	            p.detailed_content,
	            p.base_price,
	            p.is_discounted,
	            CASE 
	                WHEN p.is_discounted = 'Y' AND p.discount_start &lt;= CURRENT_TIMESTAMP AND p.discount_end &gt;= CURRENT_TIMESTAMP 
	                THEN p.discount_price
	                ELSE NULL 
	            END as discount_price,
	            p.discount_start,
	            p.discount_end,
	            p.is_business_only,
	            p.view_count,
	            p.sold_count,
	            pi.image_url,
	            pi.alt_text,
	            CASE 
	                WHEN p.is_discounted = 'Y' AND p.discount_start &lt;= CURRENT_TIMESTAMP AND p.discount_end &gt;= CURRENT_TIMESTAMP AND p.discount_price IS NOT NULL
	                THEN ROUND(((p.base_price - p.discount_price) / p.base_price) * 100)
	                ELSE 0 
	            END as discount_rate,
	            CASE 
	                WHEN EXISTS (
	                    SELECT 1 FROM product_variants PV 
	                    JOIN group_buys GB ON PV.id = GB.product_variant_id 
	                    WHERE PV.product_id = p.id AND GB.status = 'ACTIVE'
	                )
	                THEN 1 
	                ELSE 0 
	            END as is_group_purchase, GB.group_price
	        FROM products p
	        LEFT JOIN (
	            SELECT DISTINCT PV.product_id, GB.group_price
	            FROM group_buys GB
	            JOIN product_variants PV ON GB.product_variant_id = PV.id
	            WHERE GB.status = 'ACTIVE'
	            AND GB.start_date &lt;= SYSDATE
	            AND GB.end_date &gt;= SYSDATE
	        ) GB ON p.id = GB.product_id
	        LEFT JOIN (
	            SELECT product_id, image_url, alt_text,
	                   ROW_NUMBER() OVER (PARTITION BY product_id ORDER BY "ORDER") as RN
	            FROM product_images
	        ) pi ON p.id = pi.product_id AND pi.RN = 1
	        WHERE p.deleted_at IS NULL
	        ORDER BY DBMS_RANDOM.VALUE
	    ) WHERE ROWNUM &lt;= 12
	</select>
	
	<!-- 필터 옵션에 따른 상품 조회 -->
	<select id="getFilteredProducts" parameterType="map" resultType="Product">
	    SELECT *
	    FROM (
	        SELECT
	            p.id,
	            p.seller_id,
	            p.category_id,
	            p.name,
	            p.description,
	            p.detailed_content,
	            p.base_price,
	            p.is_discounted,
	            p.discount_price,
	            p.discount_start,
	            p.discount_end,
	            p.is_business_only,
	            p.view_count,
	            p.sold_count,
	            pi.image_url,
	            pi.alt_text,
	            CASE
	                WHEN p.is_discounted = 'Y' 
	                AND p.discount_start &lt;= SYSDATE 
	                AND p.discount_end &gt;= SYSDATE 
	                AND p.discount_price IS NOT NULL
	                THEN ROUND(((p.base_price - p.discount_price) / p.base_price) * 100)
	                ELSE 0
	            END as discount_rate,
	            -- 공동구매 가능 여부 확인
	            CASE
	                WHEN GB.group_price IS NOT NULL
	                THEN 1
	                ELSE 0
	            END as is_group_purchase,
	            -- 공동구매 가격 추가
	            GB.group_price as GROUP_PRICE,
	            -- 실제 판매가격 계산 (정렬에 사용)
	            CASE 
	                WHEN p.is_discounted = 'Y' 
	                AND p.discount_start &lt;= SYSDATE 
	                AND p.discount_end &gt;= SYSDATE 
	                AND p.discount_price IS NOT NULL 
	                THEN p.discount_price 
	                ELSE p.base_price 
	            END as actual_price,
	            ROWNUM as RN
	        FROM products p
	        LEFT JOIN (
	            SELECT DISTINCT PV.product_id, GB_sub.group_price
	            FROM group_buys GB_sub
	            INNER JOIN product_variants PV ON GB_sub.product_variant_id = PV.id
	            WHERE GB_sub.status = 'ACTIVE'
	            AND GB_sub.start_date &lt;= SYSDATE
	            AND GB_sub.end_date &gt;= SYSDATE
	        ) GB ON p.id = GB.product_id
	        LEFT JOIN (
	            SELECT product_id, image_url, alt_text,
	                   ROW_NUMBER() OVER (PARTITION BY product_id ORDER BY "ORDER") as RN_image
	            FROM product_images
	        ) pi ON p.id = pi.product_id AND pi.RN_image = 1
	        WHERE p.deleted_at IS NULL
	        <if test="categoryFilter != null and categoryFilter != 'all'">
	            AND (
	                <if test="categoryFilter == 'clothing'">p.category_id = 1</if>
	                <if test="categoryFilter == 'food'">p.category_id = 2</if>
	                <if test="categoryFilter == 'electronics'">p.category_id = 3</if>
	            )
	        </if>
	        <if test="priceFilter != null and priceFilter != 'all'">
	            AND (
	                <if test="priceFilter == 'under-100000'">
	                    (CASE 
	                        WHEN p.is_discounted = 'Y' 
	                        AND p.discount_start &lt;= SYSDATE 
	                        AND p.discount_end &gt;= SYSDATE 
	                        AND p.discount_price IS NOT NULL 
	                        THEN p.discount_price 
	                        ELSE p.base_price 
	                    END) &lt; 100000
	                </if>
	                <if test="priceFilter == '100000-300000'">
	                    (CASE 
	                        WHEN p.is_discounted = 'Y' 
	                        AND p.discount_start &lt;= SYSDATE 
	                        AND p.discount_end &gt;= SYSDATE 
	                        AND p.discount_price IS NOT NULL 
	                        THEN p.discount_price 
	                        ELSE p.base_price 
	                    END) BETWEEN 100000 AND 300000
	                </if>
	                <if test="priceFilter == 'over-300000'">
	                    (CASE 
	                        WHEN p.is_discounted = 'Y' 
	                        AND p.discount_start &lt;= SYSDATE 
	                        AND p.discount_end &gt;= SYSDATE 
	                        AND p.discount_price IS NOT NULL 
	                        THEN p.discount_price 
	                        ELSE p.base_price 
	                    END) &gt; 300000
	                </if>
	            )
	        </if>
	        <if test="discountFilter != null and discountFilter == true">
	            AND p.is_discounted = 'Y'
	            AND p.discount_start &lt;= SYSDATE
	            AND p.discount_end &gt;= SYSDATE
	            AND p.discount_price IS NOT NULL
	        </if>
	        <if test="groupPurchaseFilter != null and groupPurchaseFilter == true">
	            AND GB.group_price IS NOT NULL
	        </if>
	        ORDER BY
	            <choose>
	                <when test="sortOption == 'popularity'">
	                    p.view_count DESC
	                </when>
	                <when test="sortOption == 'latest'">
	                    p.created_at DESC
	                </when>
	                <when test="sortOption == 'price-low'">
	                    (CASE 
	                        WHEN p.is_discounted = 'Y' 
	                        AND p.discount_start &lt;= SYSDATE 
	                        AND p.discount_end &gt;= SYSDATE 
	                        AND p.discount_price IS NOT NULL 
	                        THEN p.discount_price 
	                        ELSE p.base_price 
	                    END) ASC
	                </when>
	                <when test="sortOption == 'price-high'">
	                    (CASE 
	                        WHEN p.is_discounted = 'Y' 
	                        AND p.discount_start &lt;= SYSDATE 
	                        AND p.discount_end &gt;= SYSDATE 
	                        AND p.discount_price IS NOT NULL 
	                        THEN p.discount_price 
	                        ELSE p.base_price 
	                    END) DESC
	                </when>
	                <when test="sortOption == 'discount'">
	                    CASE
	                        WHEN p.is_discounted = 'Y' 
	                        AND p.discount_start &lt;= SYSDATE 
	                        AND p.discount_end &gt;= SYSDATE 
	                        AND p.discount_price IS NOT NULL
	                        THEN ROUND(((p.base_price - p.discount_price) / p.base_price) * 100)
	                        ELSE 0
	                    END DESC
	                </when>
	                <otherwise>
	                    p.view_count DESC
	                </otherwise>
	            </choose>
	            , p.id DESC
	    )
	    WHERE RN BETWEEN #{offset} + 1 AND #{offset} + #{limit}
	</select>
	
	<!-- 필터 옵션에 따른 상품 개수 -->
	<select id="getFilteredProductCount" parameterType="map" resultType="int">
	    SELECT COUNT(DISTINCT p.id)
	    FROM products p
	    LEFT JOIN (
	        SELECT DISTINCT PV.product_id, GB.group_price
	        FROM group_buys GB
	        INNER JOIN product_variants PV ON GB.product_variant_id = PV.id
	        WHERE GB.status = 'ACTIVE'
	        AND GB.start_date &lt;= SYSDATE
	        AND GB.end_date &gt;= SYSDATE
	    ) GB ON p.id = GB.product_id
	    WHERE p.deleted_at IS NULL
	    <if test="categoryFilter != null and categoryFilter != 'all'">
	        AND (
	            <if test="categoryFilter == 'clothing'">p.category_id = 1</if>
	            <if test="categoryFilter == 'food'">p.category_id = 2</if>
	            <if test="categoryFilter == 'electronics'">p.category_id = 3</if>
	        )
	    </if>
	    <if test="priceFilter != null and priceFilter != 'all'">
	        AND (
	            <if test="priceFilter == 'under-100000'">
	                (CASE WHEN p.is_discounted = 'Y' AND p.discount_price IS NOT NULL THEN p.discount_price ELSE p.base_price END) &lt; 100000
	            </if>
	            <if test="priceFilter == '100000-300000'">
	                (CASE WHEN p.is_discounted = 'Y' AND p.discount_price IS NOT NULL THEN p.discount_price ELSE p.base_price END) BETWEEN 100000 AND 300000
	            </if>
	            <if test="priceFilter == 'over-300000'">
	                (CASE WHEN p.is_discounted = 'Y' AND p.discount_price IS NOT NULL THEN p.discount_price ELSE p.base_price END) &gt; 300000
	            </if>
	        )
	    </if>
	    <if test="discountFilter != null and discountFilter == true">
	        AND p.is_discounted = 'Y'
	        AND p.discount_start &lt;= SYSDATE
	        AND p.discount_end &gt;= SYSDATE
	    </if>
	    <if test="groupPurchaseFilter != null and groupPurchaseFilter == true">
	        AND GB.group_price IS NOT NULL
	    </if>
	</select>
	
    <!-- 상품 조회수 증가 -->
    <update id="increaseViewCount" parameterType="int">
        UPDATE products 
        SET view_count = view_count + 1,
            updated_at = CURRENT_TIMESTAMP
        WHERE id = #{productId}
    </update>

</mapper>
