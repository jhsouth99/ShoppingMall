<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="afterSales">

    <!-- 반품/교환 요청 생성 -->
    <insert id="insertAfterSalesRequest" parameterType="AfterSalesRequest" useGeneratedKeys="true" keyProperty="id">
        <selectKey keyProperty="id" resultType="int" order="BEFORE">
            SELECT after_sales_requests_seq.NEXTVAL FROM dual
        </selectKey>
        INSERT INTO after_sales_requests (
        id, order_id, request_type, status, customer_reason, customer_comment,
        customer_images, created_at, updated_at, request_no
        ) VALUES (
        #{id}, #{orderId}, #{requestType}, #{status}, #{customerReason}, #{customerComment},
        #{customerImages, jdbcType=VARCHAR}, #{createdAt}, #{updatedAt},
              'ASR' || TO_CHAR(SYSDATE, 'YYYYMMDD') || '-' ||
        LPAD(NVL((SELECT MAX(TO_NUMBER(SUBSTR(request_no, -5))) + 1
        FROM after_sales_requests
        WHERE request_no LIKE 'ASR' || TO_CHAR(SYSDATE, 'YYYYMMDD') || '-%'), 1
        ), 5, '0')
        )
    </insert>

    <!-- 반품/교환 요청 항목 생성 -->
    <insert id="insertAfterSalesRequestItem" parameterType="AfterSalesRequestItem" useGeneratedKeys="true" keyProperty="id">
        <selectKey keyProperty="id" resultType="int" order="BEFORE">
            SELECT after_sales_request_items_seq.NEXTVAL FROM dual
        </selectKey>
        INSERT INTO after_sales_request_items (
        id, request_id, order_item_id, item_type, quantity,
        reason_code, reason_detail, created_at
        ) VALUES (
        #{id}, #{requestId}, #{orderItemId}, #{itemType}, #{quantity},
        #{reasonCode}, #{reasonDetail}, CURRENT_TIMESTAMP
        )
    </insert>

    <!-- 사용자별 반품/교환 요청 목록 조회 -->
    <select id="findAfterSalesRequestsByUserId" parameterType="map" resultType="AfterSalesRequest">
        SELECT
            asr.id,
            asr.request_no AS requestNo,
            asr.order_id AS orderId,
            o.order_no AS orderNo,
            asr.request_type AS requestType,
            asr.status,
            asr.customer_reason AS customerReason,
            asr.customer_comment AS customerComment,
            asr.created_at AS createdAt,
            asr.updated_at AS updatedAt,
            o.user_id AS userId,
            u.name AS customerName
        FROM after_sales_requests asr
                 JOIN orders o ON asr.order_id = o.id
                 JOIN users u ON o.user_id = u.id
        WHERE o.user_id = #{userId}
        ORDER BY asr.created_at DESC
        OFFSET #{offset} ROWS FETCH NEXT #{limit} ROWS ONLY
    </select>

    <!-- 사용자별 반품/교환 요청 총 개수 -->
    <select id="countAfterSalesRequestsByUserId" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM after_sales_requests asr
                 JOIN orders o ON asr.order_id = o.id
        WHERE o.user_id = #{userId}
    </select>

    <!-- 반품/교환 요청 상세 조회 -->
    <select id="findAfterSalesRequestById" parameterType="int" resultType="AfterSalesRequest">
        SELECT
            asr.id,
            asr.request_no AS requestNo,
            asr.order_id AS orderId,
            o.order_no AS orderNo,
            asr.request_type AS requestType,
            asr.request_no AS requestNo,
            asr.status,
            asr.customer_reason AS customerReason,
            asr.customer_comment AS customerComment,
            asr.customer_images AS customerImages,
            asr.pickup_carrier_id AS pickupCarrierId,
            asr.pickup_tracking_no AS pickupTrackingNo,
            asr.pickup_requested_at AS pickupRequestedAt,
            asr.pickup_completed_at AS pickupCompletedAt,
            asr.received_at AS receivedAt,
            asr.inspected_at AS inspectedAt,
            asr.inspected_by AS inspectedBy,
            asr.inspection_comment AS inspectionComment,
            asr.completed_at AS completedAt,
            asr.processed_by AS processedBy,
            asr.created_at AS createdAt,
            asr.updated_at AS updatedAt,
            o.user_id AS userId,
            u.name AS customerName
        FROM after_sales_requests asr
                 JOIN orders o ON asr.order_id = o.id
                 JOIN users u ON o.user_id = u.id
        WHERE asr.id = #{requestId}
    </select>

    <!-- 반품/교환 요청 항목들 조회 -->
    <select id="findAfterSalesRequestItems" parameterType="int" resultType="AfterSalesRequestItem">
        SELECT
            asri.id,
            asri.request_id AS requestId,
            asri.order_item_id AS orderItemId,
            asri.item_type AS itemType,
            asri.quantity,
            asri.reason_code AS reasonCode,
            asri.reason_detail AS reasonDetail,
            asri.new_variant_id AS newVariantId,
            asri.price_difference AS priceDifference,
            asri.inspection_result AS inspectionResult,
            asri.inspection_comment AS inspectionComment,
            asri.approved_quantity AS approvedQuantity,
            asri.refund_amount AS refundAmount,
            asri.refund_id AS refundId,
            asri.new_shipment_id AS newShipmentId,
            p.name AS productName,
            (SELECT LISTAGG(pov.value_text, ' / ') WITHIN GROUP (ORDER BY po.name)
             FROM prod_variant_option_vals pvov
                      JOIN product_option_values pov ON pvov.product_option_value_id = pov.id
                      JOIN product_options po ON pov.product_option_id = po.id
             WHERE pvov.variant_id = oi.product_variant_id
            ) AS optionCombination,
            (SELECT pi.image_url
             FROM product_images pi
             WHERE pi.product_id = p.id
               AND pi.image_type = 'PRIMARY'
               AND ROWNUM = 1
            ) AS productImageUrl,
            oi.price_at_purchase AS originalPrice,
            oi.quantity AS originalQuantity
        FROM after_sales_request_items asri
                 JOIN order_items oi ON asri.order_item_id = oi.id
                 JOIN product_variants pv ON oi.product_variant_id = pv.id
                 JOIN products p ON pv.product_id = p.id
        WHERE asri.request_id = #{requestId}
        ORDER BY asri.id
    </select>

    <!-- 반품/교환 상태 히스토리 조회 -->
    <select id="findAfterSalesStatusHistory" parameterType="int" resultType="AfterSalesStatusHistory">
        SELECT
            assh.id,
            assh.request_id AS requestId,
            assh.status_from AS statusFrom,
            assh.status_to AS statusTo,
            assh.changed_by AS changedBy,
            COALESCE(u.name, '시스템') AS changedByName,
            assh.changed_at AS changedAt,
            assh.comment_text AS commentText
        FROM after_sales_status_history assh
                 LEFT JOIN users u ON assh.changed_by = u.id
        WHERE assh.request_id = #{requestId}
        ORDER BY assh.changed_at DESC
    </select>

    <!-- 반품/교환 요청 상태 업데이트 -->
    <update id="updateAfterSalesRequestStatus" parameterType="map">
        UPDATE after_sales_requests
        SET
        status = #{status},
        <if test="processedBy != null">
            processed_by = #{processedBy},
        </if>
        <if test="status == 'COMPLETED'">
            completed_at = CURRENT_TIMESTAMP,
        </if>
        <if test="status == 'RECEIVED'">
            received_at = CURRENT_TIMESTAMP,
        </if>
        <if test="status == 'INSPECTION_COMPLETED'">
            inspected_at = CURRENT_TIMESTAMP,
            inspected_by = #{processedBy},
        </if>
        updated_at = CURRENT_TIMESTAMP
        WHERE id = #{requestId}
    </update>

    <!-- 픽업 정보 업데이트 -->
    <update id="updatePickupInfo" parameterType="map">
        UPDATE after_sales_requests
        SET
            pickup_carrier_id = #{carrierId},
            pickup_tracking_no = #{trackingNumber},
            pickup_requested_at = CURRENT_TIMESTAMP,
            status = 'PICKUP_SCHEDULED',
            updated_at = CURRENT_TIMESTAMP
        WHERE id = #{requestId}
    </update>

    <!-- 검수 결과 업데이트 -->
    <update id="updateInspectionResult" parameterType="map">
        UPDATE after_sales_request_items
        SET
            inspection_result = #{result},
            inspection_comment = #{comment},
            approved_quantity = #{approvedQuantity}
        WHERE id = #{itemId}
    </update>

    <!-- 환불 정보 업데이트 -->
    <update id="updateRefundInfo" parameterType="map">
        UPDATE after_sales_request_items
        SET
            refund_id = #{refundId},
            refund_amount = #{refundAmount}
        WHERE id = #{itemId}
    </update>

    <!-- 교환 배송 정보 업데이트 -->
    <update id="updateExchangeShipmentInfo" parameterType="map">
        UPDATE after_sales_request_items
        SET
            new_shipment_id = #{shipmentId}
        WHERE id = #{itemId}
    </update>

    <!-- 판매자별 반품/교환 요청 목록 조회 (관리자용) -->
    <select id="findAfterSalesRequestsBySellerId" parameterType="map" resultType="AfterSalesRequest">
        SELECT
        asr.id,
        asr.request_no AS requestNo,
        asr.order_id AS orderId,
        o.order_no AS orderNo,
        asr.request_type AS requestType,
        asr.status,
        asr.customer_reason AS customerReason,
        asr.created_at AS createdAt,
        o.user_id AS userId,
        u.name AS customerName
        FROM after_sales_requests asr
        JOIN orders o ON asr.order_id = o.id
        JOIN users u ON o.user_id = u.id
        JOIN order_items oi ON o.id = oi.order_id
        JOIN product_variants pv ON oi.product_variant_id = pv.id
        JOIN products p ON pv.product_id = p.id
        WHERE p.seller_id = #{sellerId}
        <if test="status != null and status != ''">
            AND asr.status = #{status}
        </if>
        GROUP BY asr.id, asr.request_no, asr.order_id, o.order_no, asr.request_type,
        asr.status, asr.customer_reason, asr.created_at, o.user_id, u.name
        ORDER BY asr.created_at DESC
        OFFSET #{offset} ROWS FETCH NEXT #{limit} ROWS ONLY
    </select>

    <!-- 판매자별 반품/교환 요청 총 개수 (관리자용) -->
    <select id="countAfterSalesRequestsBySellerId" parameterType="map" resultType="int">
        SELECT COUNT(DISTINCT asr.id)
        FROM after_sales_requests asr
        JOIN orders o ON asr.order_id = o.id
        JOIN order_items oi ON o.id = oi.order_id
        JOIN product_variants pv ON oi.product_variant_id = pv.id
        JOIN products p ON pv.product_id = p.id
        WHERE p.seller_id = #{sellerId}
        <if test="status != null and status != ''">
            AND asr.status = #{status}
        </if>
    </select>

</mapper>